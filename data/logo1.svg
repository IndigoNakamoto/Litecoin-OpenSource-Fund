<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" id="Layer_1" x="0px" y="0px" width="53.87" /Users/indigo/Downloads/Lite.Space - Logo, Fav_adobe_express.svg="43.61" viewBox="0 0 512 512" enable-background="new 0 0 512 512" xml:space="preserve"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script>
<path fill="#000000" opacity="1.000000" stroke="none" d=" M513.000000,196.000000   C513.000000,301.974243 513.000000,407.448486 513.000000,512.961365   C342.400757,512.961365 171.801483,512.961365 1.101111,512.961365   C1.101111,342.442444 1.101111,171.884827 1.101111,1.163595   C171.666534,1.163595 342.333252,1.163595 513.000000,1.163595   C513.000000,65.865143 513.000000,130.682571 513.000000,196.000000  M10.012181,258.958862   C10.008562,317.609436 10.222329,376.261475 9.838099,434.909546   C9.749556,448.424805 12.468780,460.839813 19.149220,472.324219   C31.121752,492.906281 49.600609,504.640350 73.031258,504.743805   C196.494934,505.288910 319.962280,505.000122 443.428375,504.988770   C445.419189,504.988586 447.483093,505.151917 449.389252,504.708038   C464.615692,501.161865 478.355103,494.816132 488.773773,482.707245   C497.757294,472.266235 504.618286,460.143616 504.740112,446.468109   C505.299561,383.657898 504.950134,320.839600 504.966553,257.084625   C504.976959,198.273895 504.763519,139.461639 505.167236,80.653610   C505.259369,67.235771 502.785767,54.960678 496.186584,43.388107   C484.239410,22.437054 465.767059,10.406704 442.183594,10.288988   C319.066956,9.674457 195.945572,9.999249 72.825851,10.018559   C70.672234,10.018897 68.463837,10.024602 66.373535,10.466013   C45.214283,14.934237 27.734127,24.937372 18.190559,45.159836   C14.421231,53.146904 10.449297,62.065712 10.362203,70.598969   C9.724609,133.068085 10.050540,195.547012 10.012181,258.958862  z"/>
<path fill="#282728" opacity="1.000000" stroke="none" d=" M10.072529,258.022888   C10.050540,195.547012 9.724609,133.068085 10.362203,70.598969   C10.449297,62.065712 14.421231,53.146904 18.190559,45.159836   C27.734127,24.937372 45.214283,14.934237 66.373535,10.466013   C68.463837,10.024602 70.672234,10.018897 72.825851,10.018559   C195.945572,9.999249 319.066956,9.674457 442.183594,10.288988   C465.767059,10.406704 484.239410,22.437054 496.186584,43.388107   C502.785767,54.960678 505.259369,67.235771 505.167236,80.653610   C504.763519,139.461639 504.976959,198.273895 504.486389,257.501434   C436.741547,257.896271 369.476898,257.879822 302.212219,257.832825   C299.393890,257.830841 296.575775,257.543762 294.156494,257.248993   C297.449371,255.813644 302.115753,255.204300 302.927887,253.104385   C306.297638,244.391159 308.503662,235.227875 311.372681,225.424088   C297.551849,229.554749 284.659790,233.407822 271.141632,237.448029   C271.744263,235.232910 272.028809,234.109070 272.355469,232.997620   C285.813293,187.205978 299.128632,141.371506 312.865204,95.663628   C315.464111,87.015793 311.512146,81.793938 302.544617,82.089470   C286.576813,82.615707 270.579193,82.225853 254.594040,82.242409   C247.597015,82.249657 244.470154,84.463120 242.535599,91.010132   C231.649582,127.851189 220.836472,164.713806 209.935974,201.550568   C204.372116,220.352875 198.677689,239.116547 192.571640,257.869202   C143.391891,257.844727 94.682793,257.837982 45.973709,257.860352   C34.006626,257.865845 22.039589,257.966156 10.072529,258.022888  z"/>
<path fill="#335A97" opacity="1.000000" stroke="none" d=" M10.042356,258.490875   C22.039589,257.966156 34.006626,257.865845 45.973709,257.860352   C94.682793,257.837982 143.391891,257.844727 192.577713,258.259766   C191.536926,260.155548 190.269073,262.387543 188.460983,262.985229   C177.556351,266.589935 166.509171,269.761169 155.561981,273.241821   C153.978683,273.745239 151.859726,274.835632 151.377487,276.160095   C148.334198,284.518372 145.682877,293.019379 142.590820,302.419586   C156.372116,298.274170 169.126740,294.437592 182.849182,290.309875   C170.739365,331.780121 158.960678,372.116455 147.009094,413.044800   C149.196335,413.154449 150.807617,413.305603 152.418930,413.305847   C221.723053,413.317078 291.027191,413.319855 360.331299,413.307068   C367.587952,413.305756 369.953918,411.474976 372.052643,404.317444   C375.658264,392.020660 379.257782,379.721863 382.794189,367.405060   C385.239258,358.889313 382.365509,355.179230 373.419250,355.178070   C329.604370,355.172333 285.789520,355.175323 241.974640,355.175232   C240.060333,355.175232 238.146011,355.175232 236.211151,355.175232   C236.211151,353.967468 236.095657,353.446655 236.227676,352.998749   C244.461578,325.063812 252.674789,297.122528 261.078583,269.238678   C261.539948,267.707855 263.394806,265.972107 264.954803,265.499634   C274.498962,262.608826 284.145264,260.055359 293.757538,257.389526   C296.575775,257.543762 299.393890,257.830841 302.212219,257.832825   C369.476898,257.879822 436.741547,257.896271 504.466553,257.971222   C504.950134,320.839600 505.299561,383.657898 504.740112,446.468109   C504.618286,460.143616 497.757294,472.266235 488.773773,482.707245   C478.355103,494.816132 464.615692,501.161865 449.389252,504.708038   C447.483093,505.151917 445.419189,504.988586 443.428375,504.988770   C319.962280,505.000122 196.494934,505.288910 73.031258,504.743805   C49.600609,504.640350 31.121752,492.906281 19.149220,472.324219   C12.468780,460.839813 9.749556,448.424805 9.838099,434.909546   C10.222329,376.261475 10.008562,317.609436 10.042356,258.490875  z"/>
<path fill="#FCFDFD" opacity="1.000000" stroke="none" d=" M294.156494,257.248993   C284.145264,260.055359 274.498962,262.608826 264.954803,265.499634   C263.394806,265.972107 261.539948,267.707855 261.078583,269.238678   C252.674789,297.122528 244.461578,325.063812 236.227676,352.998749   C236.095657,353.446655 236.211151,353.967468 236.211151,355.175232   C238.146011,355.175232 240.060333,355.175232 241.974640,355.175232   C285.789520,355.175323 329.604370,355.172333 373.419250,355.178070   C382.365509,355.179230 385.239258,358.889313 382.794189,367.405060   C379.257782,379.721863 375.658264,392.020660 372.052643,404.317444   C369.953918,411.474976 367.587952,413.305756 360.331299,413.307068   C291.027191,413.319855 221.723053,413.317078 152.418930,413.305847   C150.807617,413.305603 149.196335,413.154449 147.009094,413.044800   C158.960678,372.116455 170.739365,331.780121 182.849182,290.309875   C169.126740,294.437592 156.372116,298.274170 142.590820,302.419586   C145.682877,293.019379 148.334198,284.518372 151.377487,276.160095   C151.859726,274.835632 153.978683,273.745239 155.561981,273.241821   C166.509171,269.761169 177.556351,266.589935 188.460983,262.985229   C190.269073,262.387543 191.536926,260.155548 193.048370,258.288239   C198.677689,239.116547 204.372116,220.352875 209.935974,201.550568   C220.836472,164.713806 231.649582,127.851189 242.535599,91.010132   C244.470154,84.463120 247.597015,82.249657 254.594040,82.242409   C270.579193,82.225853 286.576813,82.615707 302.544617,82.089470   C311.512146,81.793938 315.464111,87.015793 312.865204,95.663628   C299.128632,141.371506 285.813293,187.205978 272.355469,232.997620   C272.028809,234.109070 271.744263,235.232910 271.141632,237.448029   C284.659790,233.407822 297.551849,229.554749 311.372681,225.424088   C308.503662,235.227875 306.297638,244.391159 302.927887,253.104385   C302.115753,255.204300 297.449371,255.813644 294.156494,257.248993  z"/>
</svg>